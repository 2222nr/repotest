와일드 카드 문자 (wild card character)

*  : select 구문 내에서 사용
없는 것을 포함한 모든 자료를 의미  => 김* 
dir v*.* 
? : 자리를 차지하고 있는 한문자 => 김?

select 구문의 조건절에서 사용, 
% => *    ex) %313%, 2010%, %103
_  => ?	 ex) ___, 피__, _지_

◆ as 별명 (as 생략가넝)
select name as '이름' from professor;

◆ 연산자
 >=, <=, =, !=(<>), NOT


◆ select * from 테이블명 
where 조건   >= 10 
or => 같은 필드 여러 조건 : 필드 in (조건) 
and

◆ order by 기준필드 asc / desc (Ascending / Descending)    => 정렬(기본:오름차순)

1.  id가 3이상인 자료의 이름과 전화번호를 출력하고 이름 내림차순으로 정렬
select name, phone from professor 
where id >= 3 
order by name desc;

id가 1~3 사이인 자료 
select * from professor 
where id >= 1 and id <=3
order by name desc;

select * from professor where id between 1 and 3 
order by name desc;

2. belong이 IDE인 자료의 아이디, 이름, 소속을 출력
select id, name, belong from student
where belong = 'IDE';

3. belong이 IDE 또는 ESE 또는 CSE인 자료의 아이디, 이름, 소속을 출력
SELECT id, name, belong from student 
where belong = 'IDE' or belong = 'ESE' or belong = 'CSE';

=>
SELECT id, name, belong from student 
where belong in('IDE', 'ESE', 'CSE')
order by belong asc;

4. student 테이블에서 id가 2010으로 시작하는 자료들의 id와 이름
SELECT id, name from student
where id like '2010%';

5. 이름이 3글자
select * from student
where name like '___';

6. student 테이블에서 소속(belong)이 IDE가 아닌 자료 출력

SELECT * FROM student
where belong != 'IDE';

SELECT * FROM student
where NOT belong = 'IDE';

7. 학생 테이블에서 id가 2009가 포함되지 않는 자료
select * from student where not id like '2009%';
select * from student where id not like '2009%';

8. 학생 테이블에서 belong이 IDE 또는 CSE 또는 MSE 인 자료중 id에 2011을 포함하는 자료를 
p_id에 대해 내림차순으로 정렬 (출력은 id, 이름, 소속, 전화번호, 교수_id 보여지게 출력)
select id, name as '이름', belong as '소속', tel as '전화번호', p_id as '교수_id' from student
where belong in('IDE', 'CSE', 'MSE') and id like '2011%' 
order by p_id desc;

------------------------------
group by	
having 



테이블 완전 삭제 : drop tabe 테이블명;
DB 완전 삭제 : drop database db명;
(쿼리 update, delete 주의해서 사용!!)
테이블 내용 삭제 : delete from 테이블명 where 조건;


9. 학생 테이블에서 이름 전진을 삭제합니다.
delete from student where name = '전진';

10. 학생 테이블에 자료 입력
20090302 전진 IDE 01012321313 3
insert into student values(20090302, '전진', 'IDE', '01012321313', 3);

11. 학생 테이블 중 전화번호에 131을 포함하는 자료를 삭제하세요
delete from student where tel like '%131%';


◆ update 구문
update 테이블명 set 필드명 = 변경값 where 조건

12. 학생테이블의 id가 20080104인 학생의 이름을 '오나미'로 바꾸기
update student set name = '오나미' where id = 20080104;

13. 학생테이블의 이름이 부우인 친구의 belong을 MSE, 전화번호를 010-7777-7777로 바꾸기
update student set belong = 'MSE', tel = '01077777777' where name = '부우';


◆ Alter 구문 테이블 스키마 변경 
rename (drop column/ add column/ change column/ modify column)

테이블명 변경 -> alter table 테이블명 rename to 바꿀테이블명;

컬럼 추가 -> alter table 테이블명
modify column 컬럼명 바꿀 타입;

14. professor 테이블명을 teacher로 변경
alter table professor rename to teacher;

15. teacher 테이블에 star 필드를 맨 마지막에 추가
alter table teacher add column star int not null after phone;
after => last 도 가능?

16. 변경(change, modify) 
change -> 컬럼 이름까지? 변경 가능
modify -> 컬럼 타입 변경
alter table teacher modify column star bigint default 10000;

17. 필드의 삭제(drop column)
alter table teacher drop column star;

◆ 테이블 구조 확인
show create table teacher;


# 통계 함수(내부 함수)의 사용

select count(*) from student;  => 테이블 카운트
select count(*) as student_count from student;

평균 구하기
select avg(컬럼) as 별명 from 테이블명;
select avg(p_id) as avg from student;

18. student 테이블의 소속 인원수를 소속(belong)의 내림차순으로 정렬
select belong as '소속', count(belong) as '인원수' from student group by belong 
order by count(belong) desc, belong asc;
=
select belong as '소속', count(*) as '인원수' from student group by belong 
order by belong desc;


20. 19번의 결과 중에 count(belong)가 3이상인 자료만 출력
select belong as '소속', count(belong) as '인원수' from student 
group by belong having count(belong) >=3
order by count(belong) desc, belong asc;


21. 학생테이블에서 belong이 IDE, MSE, ESE인 자료의 각 p_id의 평균을 구하고, 
평균이 2 이하인 자료만 belong에 대해서 내림차순 정렬하시오

select belong, avg(p_id) as avg from student where belong in ('IDE', 'MSE', 'ESE')
group by belong having avg(p_id) <=2 
order by belong desc; 